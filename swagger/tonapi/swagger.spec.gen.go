// Package tonapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package tonapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"strings"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
