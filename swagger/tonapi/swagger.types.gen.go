// Package tonapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package tonapi

// Account defines model for Account.
type Account struct {
	Addr                   *string `json:"addr,omitempty"`
	AddrUf                 *string `json:"addr_uf,omitempty"`
	BalanceNanogram        *int64  `json:"balance_nanogram,omitempty"`
	LastPaid               *int64  `json:"last_paid,omitempty"`
	LastTransHash          *string `json:"last_trans_hash,omitempty"`
	LastTransLt            *int64  `json:"last_trans_lt,omitempty"`
	LastTransLtStorage     *int64  `json:"last_trans_lt_storage,omitempty"`
	MessagesCount          *int64  `json:"messages_count,omitempty"`
	SeqNo                  *int64  `json:"seq_no,omitempty"`
	Shard                  *int64  `json:"shard,omitempty"`
	Status                 *string `json:"status,omitempty"`
	StorageUsedBits        *int64  `json:"storage_used_bits,omitempty"`
	StorageUsedCells       *int64  `json:"storage_used_cells,omitempty"`
	StorageUsedPublicCells *int64  `json:"storage_used_public_cells,omitempty"`
	Tick                   *int64  `json:"tick,omitempty"`
	Tock                   *int64  `json:"tock,omitempty"`
	WorkchainId            *int32  `json:"workchain_id,omitempty"`
}

// AccountMessage defines model for AccountMessage.
type AccountMessage struct {
	AccountAddr        *string `json:"account_addr,omitempty"`
	AccountAddrUf      *string `json:"account_addr_uf,omitempty"`
	Body               *string `json:"body,omitempty"`
	Bounce             *int32  `json:"bounce,omitempty"`
	Bounced            *int32  `json:"bounced,omitempty"`
	Dest               *string `json:"dest,omitempty"`
	DestUf             *string `json:"dest_uf,omitempty"`
	DestWorkchainId    *int32  `json:"dest_workchain_id,omitempty"`
	Direction          *string `json:"direction,omitempty"`
	FwdFeeNanograms    *string `json:"fwd_fee_nanograms,omitempty"`
	IhrFeeNanograms    *string `json:"ihr_fee_nanograms,omitempty"`
	ImportFeeNanograms *string `json:"import_fee_nanograms,omitempty"`
	Lt                 *int64  `json:"lt,omitempty"`
	MessageLt          *int64  `json:"message_lt,omitempty"`
	MessageType        *string `json:"message_type,omitempty"`
	SeqNo              *int64  `json:"seq_no,omitempty"`
	Shard              *string `json:"shard,omitempty"`
	Src                *string `json:"src,omitempty"`
	SrcUf              *string `json:"src_uf,omitempty"`
	SrcWorkchainId     *int32  `json:"src_workchain_id,omitempty"`
	Time               *int64  `json:"time,omitempty"`
	TrxHash            *string `json:"trx_hash,omitempty"`
	Type               *string `json:"type,omitempty"`
	ValueNanograms     *string `json:"value_nanograms,omitempty"`
	WorkchainId        *int32  `json:"workchain_id,omitempty"`
}

// AccountMessageResponse defines model for AccountMessageResponse.
type AccountMessageResponse struct {
	Messages *[]AccountMessage `json:"messages,omitempty"`
	ScrollId *string           `json:"scroll_id,omitempty"`
}

// AccountWhale defines model for AccountWhale.
type AccountWhale struct {
	AddrRaw                  *string  `json:"addr_raw,omitempty"`
	AddrUf                   *string  `json:"addr_uf,omitempty"`
	BalanceNanogram          *int     `json:"balance_nanogram,omitempty"`
	BalancePercentageOfTotal *float64 `json:"balance_percentage_of_total,omitempty"`
}

// AddrCount defines model for AddrCount.
type AddrCount struct {
	Addr        *string `json:"addr,omitempty"`
	AddrUf      *string `json:"addr_uf,omitempty"`
	Count       *int64  `json:"count,omitempty"`
	WorkchainId *int32  `json:"workchain_id,omitempty"`
}

// AddrStd defines model for AddrStd.
type AddrStd struct {
	Addr        *string `json:"addr,omitempty"`
	AddrUf      *string `json:"addr_uf,omitempty"`
	Anycast     *string `json:"anycast,omitempty"`
	IsEmpty     *bool   `json:"is_empty,omitempty"`
	WorkchainId *int32  `json:"workchain_id,omitempty"`
}

// AddrTopByMessageCountResponse defines model for AddrTopByMessageCountResponse.
type AddrTopByMessageCountResponse struct {
	TopIn  *[]AddrCount `json:"top_in,omitempty"`
	TopOut *[]AddrCount `json:"top_out,omitempty"`
}

// AddressesMetrics defines model for AddressesMetrics.
type AddressesMetrics struct {
	DailyActive   *int64 `json:"daily_active,omitempty"`
	MonthlyActive *int64 `json:"monthly_active,omitempty"`
	TotalAddr     *int64 `json:"total_addr,omitempty"`
	TotalNanogram *int64 `json:"total_nanogram,omitempty"`
}

// BlockId defines model for BlockId.
type BlockId struct {
	SeqNo       *int64 `json:"seq_no,omitempty"`
	Shard       *int64 `json:"shard,omitempty"`
	WorkchainId *int32 `json:"workchain_id,omitempty"`
}

// BlockIdString defines model for BlockIdString.
type BlockIdString string

// BlockInFeed defines model for BlockInFeed.
type BlockInFeed struct {
	FwdFeeNanograms    *int64  `json:"fwd_fee_nanograms,omitempty"`
	IhrFeeNanograms    *int64  `json:"ihr_fee_nanograms,omitempty"`
	ImportFeeNanograms *int64  `json:"import_fee_nanograms,omitempty"`
	RootHash           *string `json:"root_hash,omitempty"`
	SeqNo              *int64  `json:"seq_no,omitempty"`
	Shard              *int64  `json:"shard,omitempty"`
	StartLt            *int64  `json:"start_lt,omitempty"`
	Time               *int64  `json:"time,omitempty"`
	TotalFeesNanograms *int64  `json:"total_fees_nanograms,omitempty"`
	TrxCount           *int64  `json:"trx_count,omitempty"`
	ValueNanograms     *int64  `json:"value_nanograms,omitempty"`
	WorkchainId        *int32  `json:"workchain_id,omitempty"`
}

// BlockInfo defines model for BlockInfo.
type BlockInfo struct {
	AfterMerge        *bool       `json:"after_merge,omitempty"`
	AfterSplit        *bool       `json:"after_split,omitempty"`
	BeforeSplit       *bool       `json:"before_split,omitempty"`
	BlockStats        *BlockStats `json:"block_stats,omitempty"`
	EndLt             *int64      `json:"end_lt,omitempty"`
	FileHash          *string     `json:"file_hash,omitempty"`
	Flags             *int        `json:"flags,omitempty"`
	GenCatchainSeqno  *int64      `json:"gen_catchain_seqno,omitempty"`
	GenUtime          *int64      `json:"gen_utime,omitempty"`
	KeyBlock          *bool       `json:"key_block,omitempty"`
	MasterRef         *BlockRef   `json:"master_ref,omitempty"`
	MinRefMcSeqno     *int64      `json:"min_ref_mc_seqno,omitempty"`
	NextSeqNo         *int64      `json:"next_seq_no,omitempty"`
	NotMaster         *bool       `json:"not_master,omitempty"`
	Prev1Ref          *BlockRef   `json:"prev1_ref,omitempty"`
	Prev2Ref          *BlockRef   `json:"prev2_ref,omitempty"`
	PrevKeyBlockSeqno *int64      `json:"prev_key_block_seqno,omitempty"`
	PrevSeqNo         *int64      `json:"prev_seq_no,omitempty"`
	RootHash          *string     `json:"root_hash,omitempty"`
	SeqNo             *int64      `json:"seq_no,omitempty"`
	Shard             *int64      `json:"shard,omitempty"`
	StartLt           *int64      `json:"start_lt,omitempty"`
	ValueFlow         *ValueFlow  `json:"value_flow,omitempty"`
	Version           *int32      `json:"version,omitempty"`
	WantMerge         *bool       `json:"want_merge,omitempty"`
	WantSplit         *bool       `json:"want_split,omitempty"`
	WorkchainId       *int32      `json:"workchain_id,omitempty"`
}

// BlockRef defines model for BlockRef.
type BlockRef struct {
	EndLt    *int64  `json:"end_lt,omitempty"`
	FileHash *string `json:"file_hash,omitempty"`
	RootHash *string `json:"root_hash,omitempty"`
	SeqNo    *int64  `json:"seq_no,omitempty"`
}

// BlockStats defines model for BlockStats.
type BlockStats struct {
	MsgCount              *int32 `json:"msg_count,omitempty"`
	MsgFwdFeeNanograms    *int64 `json:"msg_fwd_fee_nanograms,omitempty"`
	MsgIhrFeeNanograms    *int64 `json:"msg_ihr_fee_nanograms,omitempty"`
	MsgImportFeeNanograms *int64 `json:"msg_import_fee_nanograms,omitempty"`
	SentNanograms         *int64 `json:"sent_nanograms,omitempty"`
	TrxCount              *int32 `json:"trx_count,omitempty"`
	TrxTotalFeesNanograms *int64 `json:"trx_total_fees_nanograms,omitempty"`
}

// BlocksFeedResponse defines model for BlocksFeedResponse.
type BlocksFeedResponse struct {
	Blocks   *[]BlockInFeed `json:"blocks,omitempty"`
	ScrollId *string        `json:"scroll_id,omitempty"`
}

// BlocksMetrics defines model for BlocksMetrics.
type BlocksMetrics struct {
	AvgBlockTime *float64 `json:"avg_block_time,omitempty"`
	BlocksHeight *int64   `json:"blocks_height,omitempty"`
	TotalBlocks  *int64   `json:"total_blocks,omitempty"`
}

// GlobalMetrics defines model for GlobalMetrics.
type GlobalMetrics struct {
	TotalAddr         *int64 `json:"total_addr,omitempty"`
	TotalBlocks       *int64 `json:"total_blocks,omitempty"`
	TotalMessages     *int64 `json:"total_messages,omitempty"`
	TotalNanogram     *int64 `json:"total_nanogram,omitempty"`
	TotalTransactions *int64 `json:"total_transactions,omitempty"`
}

// MessageFeed defines model for MessageFeed.
type MessageFeed struct {
	Body             *string `json:"body,omitempty"`
	Bounce           *bool   `json:"bounce,omitempty"`
	Dest             *string `json:"dest,omitempty"`
	DestUf           *string `json:"dest_uf,omitempty"`
	DestWorkchainId  *string `json:"dest_workchain_id,omitempty"`
	Direction        *string `json:"direction,omitempty"`
	Lt               *int64  `json:"lt,omitempty"`
	MessageLt        *int64  `json:"message_lt,omitempty"`
	SeqNo            *int64  `json:"seq_no,omitempty"`
	Shard            *int64  `json:"shard,omitempty"`
	Src              *string `json:"src,omitempty"`
	SrcUf            *string `json:"src_uf,omitempty"`
	SrcWorkchainId   *string `json:"src_workchain_id,omitempty"`
	Time             *int64  `json:"time,omitempty"`
	TotalFeeNanogram *int    `json:"total_fee_nanogram,omitempty"`
	TrxHash          *string `json:"trx_hash,omitempty"`
	ValueNanogram    *int    `json:"value_nanogram,omitempty"`
	WorkchainId      *int32  `json:"workchain_id,omitempty"`
}

// MessageFeedResponse defines model for MessageFeedResponse.
type MessageFeedResponse struct {
	Messages *[]MessageFeed `json:"messages,omitempty"`
	ScrollId *string        `json:"scroll_id,omitempty"`
}

// MessagesByTypeResult defines model for MessagesByTypeResult.
type MessagesByTypeResult struct {
	Rows *[]MessagesByTypeTimeseries `json:"rows,omitempty"`
}

// MessagesByTypeTimeseries defines model for MessagesByTypeTimeseries.
type MessagesByTypeTimeseries struct {
	MessagesCount *Int64Array `json:"messages_count,omitempty"`
	Time          *Int64Array `json:"time,omitempty"`
	Type          *string     `json:"type,omitempty"`
	WorkchainId   *string     `json:"workchain_id,omitempty"`
}

// MessagesMetrics defines model for MessagesMetrics.
type MessagesMetrics struct {
	Mps               *float64 `json:"mps,omitempty"`
	TotalMessages     *int64   `json:"total_messages,omitempty"`
	TotalTransactions *int64   `json:"total_transactions,omitempty"`
	Tps               *float64 `json:"tps,omitempty"`
}

// MessagesOrdCountResult defines model for MessagesOrdCountResult.
type MessagesOrdCountResult struct {
	Rows *[]MessagesOrdCountTimeseries `json:"rows,omitempty"`
}

// MessagesOrdCountTimeseries defines model for MessagesOrdCountTimeseries.
type MessagesOrdCountTimeseries struct {
	Count       *Int64Array `json:"count,omitempty"`
	Time        *Int64Array `json:"time,omitempty"`
	WorkchainId *string     `json:"workchain_id,omitempty"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	Hint *string `json:"hint,omitempty"`
	Link *string `json:"link,omitempty"`
	Type *string `json:"type,omitempty"`
}

// SentAndFees defines model for SentAndFees.
type SentAndFees struct {
	AvgFees *float64 `json:"avg_fees,omitempty"`
	AvgSent *float64 `json:"avg_sent,omitempty"`
	Time    *string  `json:"time,omitempty"`
}

// ShardBlock defines model for ShardBlock.
type ShardBlock struct {
	SeqNo       *int64 `json:"seq_no,omitempty"`
	Shard       *int64 `json:"shard,omitempty"`
	WorkchainId *int32 `json:"workchain_id,omitempty"`
}

// ShardBlocksRange defines model for ShardBlocksRange.
type ShardBlocksRange struct {
	FromSeq     *int64 `json:"from_seq,omitempty"`
	MasterSeq   *int64 `json:"master_seq,omitempty"`
	Shard       *int64 `json:"shard,omitempty"`
	ToSeq       *int64 `json:"to_seq,omitempty"`
	WorkchainId *int32 `json:"workchain_id,omitempty"`
}

// TimeseriesBlocksByWorkchain defines model for TimeseriesBlocksByWorkchain.
type TimeseriesBlocksByWorkchain struct {
	Masterchain *Int64Array `json:"masterchain,omitempty"`
	Time        *Int64Array `json:"time,omitempty"`
	Workchain0  *Int64Array `json:"workchain0,omitempty"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	AccountAddr           *string               `json:"account_addr,omitempty"`
	AccountAddrUf         *string               `json:"account_addr_uf,omitempty"`
	EndStatus             *string               `json:"end_status,omitempty"`
	Hash                  *string               `json:"hash,omitempty"`
	InMsg                 *TransactionMessage   `json:"in_msg,omitempty"`
	IsTock                *int64                `json:"is_tock,omitempty"`
	Lt                    *int64                `json:"lt,omitempty"`
	Now                   *int64                `json:"now,omitempty"`
	OrigStatus            *string               `json:"orig_status,omitempty"`
	OutMsgs               *[]TransactionMessage `json:"out_msgs,omitempty"`
	PrevTransHash         *string               `json:"prev_trans_hash,omitempty"`
	PrevTransLt           *int64                `json:"prev_trans_lt,omitempty"`
	SeqNo                 *int64                `json:"seq_no,omitempty"`
	Shard                 *int64                `json:"shard,omitempty"`
	StateUpdateNewHash    *string               `json:"state_update_new_hash,omitempty"`
	StateUpdateOldHash    *string               `json:"state_update_old_hash,omitempty"`
	TotalFeesNanograms    *int64                `json:"total_fees_nanograms,omitempty"`
	TotalFeesNanogramsLen *int32                `json:"total_fees_nanograms_len,omitempty"`
	TotalNanograms        *int64                `json:"total_nanograms,omitempty"`
	Type                  *string               `json:"type,omitempty"`
	WorkchainId           *int32                `json:"workchain_id,omitempty"`
}

// TransactionMessage defines model for TransactionMessage.
type TransactionMessage struct {
	BodyType              *string  `json:"body_type,omitempty"`
	BodyValue             *string  `json:"body_value,omitempty"`
	Bounce                *bool    `json:"bounce,omitempty"`
	Bounced               *bool    `json:"bounced,omitempty"`
	CreatedAt             *int64   `json:"created_at,omitempty"`
	CreatedLt             *int64   `json:"created_lt,omitempty"`
	Dest                  *AddrStd `json:"dest,omitempty"`
	FwdFeeNanograms       *int64   `json:"fwd_fee_nanograms,omitempty"`
	FwdFeeNanogramsLen    *int32   `json:"fwd_fee_nanograms_len,omitempty"`
	IhrDisabled           *bool    `json:"ihr_disabled,omitempty"`
	IhrFeeNanograms       *int64   `json:"ihr_fee_nanograms,omitempty"`
	IhrFeeNanogramsLen    *int32   `json:"ihr_fee_nanograms_len,omitempty"`
	ImportFeeNanograms    *int64   `json:"import_fee_nanograms,omitempty"`
	ImportFeeNanogramsLen *int32   `json:"import_fee_nanograms_len,omitempty"`
	Init                  *string  `json:"init,omitempty"`
	Src                   *AddrStd `json:"src,omitempty"`
	Type                  *string  `json:"type,omitempty"`
	ValueNanograms        *int64   `json:"value_nanograms,omitempty"`
	ValueNanogramsLen     *int32   `json:"value_nanograms_len,omitempty"`
}

// TransactionsFeed defines model for TransactionsFeed.
type TransactionsFeed struct {
	AccountAddr             *string `json:"account_addr,omitempty"`
	AccountAddrUf           *string `json:"account_addr_uf,omitempty"`
	Dest                    *string `json:"dest,omitempty"`
	DestUf                  *string `json:"dest_uf,omitempty"`
	DestWorkchainId         *int    `json:"dest_workchain_id,omitempty"`
	IsTock                  *int    `json:"is_tock,omitempty"`
	Lt                      *int64  `json:"lt,omitempty"`
	MsgInCreatedLt          *int64  `json:"msg_in_created_lt,omitempty"`
	MsgInType               *string `json:"msg_in_type,omitempty"`
	SeqNo                   *int64  `json:"seq_no,omitempty"`
	Shard                   *int64  `json:"shard,omitempty"`
	Src                     *string `json:"src,omitempty"`
	SrcUf                   *string `json:"src_uf,omitempty"`
	SrcWorkchainId          *int    `json:"src_workchain_id,omitempty"`
	Time                    *int64  `json:"time,omitempty"`
	TotalFeesNanograms      *int64  `json:"total_fees_nanograms,omitempty"`
	TotalFwdFeeNanograms    *int64  `json:"total_fwd_fee_nanograms,omitempty"`
	TotalIhrFeeNanograms    *int64  `json:"total_ihr_fee_nanograms,omitempty"`
	TotalImportFeeNanograms *int64  `json:"total_import_fee_nanograms,omitempty"`
	TotalNanograms          *int64  `json:"total_nanograms,omitempty"`
	TrxHash                 *string `json:"trx_hash,omitempty"`
	Type                    *string `json:"type,omitempty"`
	WorkchainId             *int32  `json:"workchain_id,omitempty"`
}

// TransactionsFeedResponse defines model for TransactionsFeedResponse.
type TransactionsFeedResponse struct {
	ScrollId     *string             `json:"scroll_id,omitempty"`
	Transactions *[]TransactionsFeed `json:"transactions,omitempty"`
}

// TrxMetrics defines model for TrxMetrics.
type TrxMetrics struct {
	TrxLastDay   *int64 `json:"trx_last_day,omitempty"`
	TrxLastMonth *int64 `json:"trx_last_month,omitempty"`
}

// ValueFlow defines model for ValueFlow.
type ValueFlow struct {
	Created       *int64 `json:"created,omitempty"`
	Exported      *int64 `json:"exported,omitempty"`
	FeesCollected *int64 `json:"fees_collected,omitempty"`
	FeesImported  *int64 `json:"fees_imported,omitempty"`
	FromPrevBlk   *int64 `json:"from_prev_blk,omitempty"`
	Imported      *int64 `json:"imported,omitempty"`
	Minted        *int64 `json:"minted,omitempty"`
	Recovered     *int64 `json:"recovered,omitempty"`
	ToNextBlk     *int64 `json:"to_next_blk,omitempty"`
}

// VolumeByGramsResult defines model for VolumeByGramsResult.
type VolumeByGramsResult struct {
	Rows *[]VolumeByGramsTimeseries `json:"rows,omitempty"`
}

// VolumeByGramsTimeseries defines model for VolumeByGramsTimeseries.
type VolumeByGramsTimeseries struct {
	Time        *Int64Array  `json:"time,omitempty"`
	VolumeGrams *StringArray `json:"volume_grams,omitempty"`
	WorkchainId *string      `json:"workchain_id,omitempty"`
}

// Error defines model for error.
type Error struct {
	Error   *bool  `json:"error,omitempty"`
	Message string `json:"message"`
}

// Int64Array defines model for int64Array.
type Int64Array []int64

// StringArray defines model for stringArray.
type StringArray []string

// GetV1AccountParams defines parameters for GetV1Account.
type GetV1AccountParams struct {

	// Account address (both raw and user-friendly addresses formats supported).
	Address string `json:"address"`
}

// GetV1AccountMessagesParams defines parameters for GetV1AccountMessages.
type GetV1AccountMessagesParams struct {

	// Account address (both raw and user-friendly addresses formats supported).
	Address string `json:"address"`

	// Get transactions before lt
	ScrollId *string `json:"scroll_id,omitempty"`

	// Limit transactions
	Limit *int `json:"limit,omitempty"`
}

// GetV1AccountQrParams defines parameters for GetV1AccountQr.
type GetV1AccountQrParams struct {

	// Account address (both raw and user-friendly addresses formats supported).
	Address string `json:"address"`

	// Image format png or png_base64
	Format *string `json:"format,omitempty"`
}

// GetV1BlockInfoParams defines parameters for GetV1BlockInfo.
type GetV1BlockInfoParams struct {

	// Block ID string in format: (WorkchainId,ShardHEX,SeqNo)
	Block *string `json:"block,omitempty"`

	// Master Block ID string in format: (WorkchainId,ShardHEX,SeqNo). Search only in shards block.
	BlockMaster *string `json:"block_master,omitempty"`

	// Block range from. Block ID string in format: (WorkchainId,ShardHEX,SeqNo)
	BlockFrom *string `json:"block_from,omitempty"`

	// Block range to. Block ID string in format: (WorkchainId,ShardHEX,SeqNo)
	BlockTo *string `json:"block_to,omitempty"`
}

// GetV1BlockTlbParams defines parameters for GetV1BlockTlb.
type GetV1BlockTlbParams struct {

	// Block ID string in format: (WorkchainId,ShardHEX,SeqNo)
	Block *string `json:"block,omitempty"`
}

// GetV1BlockTransactionsParams defines parameters for GetV1BlockTransactions.
type GetV1BlockTransactionsParams struct {

	// Block ID string in format: <b><i>(WorkchainId,ShardHEX,SeqNo)</i></b>
	Block *string `json:"block,omitempty"`

	// Master Block ID string in format: <b><i>(WorkchainId,ShardHEX,SeqNo)</i></b>. Search only in shards block.
	BlockMaster *string `json:"block_master,omitempty"`

	// Block range from. Block ID string in format: <b><i>(WorkchainId,ShardHEX,SeqNo)</i></b>
	BlockFrom *string `json:"block_from,omitempty"`

	// Block range to. Block ID string in format: <b><i>(WorkchainId,ShardHEX,SeqNo)</i></b>
	BlockTo *string `json:"block_to,omitempty"`

	// Message dir
	Dir *string `json:"dir,omitempty"`

	// Message addr. Search in MessageSrcAddr AND MessageDestAddr. You can set multiple <b>addr</b>'s. Accepts <b>addr</b>'s in both raw and user-friendly format.
	Addr *string `json:"addr,omitempty"`

	// Message type
	MessageType *string `json:"message_type,omitempty"`

	// Transaction type
	Type *string `json:"type,omitempty"`

	// Transaction hash
	Hash *string `json:"hash,omitempty"`

	// Logical Time
	Lt *int64 `json:"lt,omitempty"`
}

// GetV1BlocksFeedParams defines parameters for GetV1BlocksFeed.
type GetV1BlocksFeedParams struct {

	// Scroll ID
	ScrollId *string `json:"scroll_id,omitempty"`

	// Limit blocks
	Limit *int `json:"limit,omitempty"`

	// Workchain Id filter
	WorkchainId *int `json:"workchain_id,omitempty"`
}

// GetV1MasterBlockShardsActualParams defines parameters for GetV1MasterBlockShardsActual.
type GetV1MasterBlockShardsActualParams struct {

	// Master Block ID string in format: (WorkchainId,ShardHEX,SeqNo). You can set multiply block_master's.
	BlockMaster string `json:"block_master"`
}

// GetV1MasterBlockShardsRangeParams defines parameters for GetV1MasterBlockShardsRange.
type GetV1MasterBlockShardsRangeParams struct {

	// Master Block ID string in format: (WorkchainId,ShardHEX,SeqNo). You can set multiply block_master's.
	BlockMaster string `json:"block_master"`
}

// GetV1MessageGetParams defines parameters for GetV1MessageGet.
type GetV1MessageGetParams struct {

	// Transaction hash
	TrxHash string `json:"trx_hash"`

	// Message logical time
	MessageLt int `json:"message_lt"`
}

// GetV1MessagesFeedParams defines parameters for GetV1MessagesFeed.
type GetV1MessagesFeedParams struct {

	// Scroll ID
	ScrollId *string `json:"scroll_id,omitempty"`

	// Limit messages
	Limit *int `json:"limit,omitempty"`

	// Workchain Id filter
	WorkchainId *int `json:"workchain_id,omitempty"`
}

// GetV1SearchParams defines parameters for GetV1Search.
type GetV1SearchParams struct {

	// Query string (full block fromat, account addr user uf/raw, block height, any hash)
	Q string `json:"q"`
}

// GetV1StatsAddressesParams defines parameters for GetV1StatsAddresses.
type GetV1StatsAddressesParams struct {

	// Get stats for specific WorckchainId. Do not specify to get workchain agnostic stats.
	WorkchainId *string `json:"workchain_id,omitempty"`
}

// GetV1StatsBlocksParams defines parameters for GetV1StatsBlocks.
type GetV1StatsBlocksParams struct {

	// Get stats for specific WorckchainId. Do not specify to get workchain agnostic stats.
	WorkchainId *string `json:"workchain_id,omitempty"`
}

// GetV1StatsMessagesParams defines parameters for GetV1StatsMessages.
type GetV1StatsMessagesParams struct {

	// Get stats for specific WorckchainId. Do not specify to get workchain agnostic stats.
	WorkchainId *string `json:"workchain_id,omitempty"`
}

// GetV1StatsTransactionsParams defines parameters for GetV1StatsTransactions.
type GetV1StatsTransactionsParams struct {

	// Get stats for specific WorckchainId. Do not specify to get workchain agnostic stats.
	WorkchainId *string `json:"workchain_id,omitempty"`
}

// GetV1TopWhalesParams defines parameters for GetV1TopWhales.
type GetV1TopWhalesParams struct {

	// Get top whales for specific WorckchainId. Do not specify to get workchain agnostic stats.
	WorkchainId *string `json:"workchain_id,omitempty"`

	// Get top whales with limit. Do not specify to get first 50 whales.
	Limit *int `json:"limit,omitempty"`

	// Get top whales with offset. Do not specify to get first whales (with no offset applied).
	Offset *int `json:"offset,omitempty"`
}

// GetV1TransactionParams defines parameters for GetV1Transaction.
type GetV1TransactionParams struct {

	// Transaction hash
	Hash *string `json:"hash,omitempty"`
}

// GetV1TransactionsFeedParams defines parameters for GetV1TransactionsFeed.
type GetV1TransactionsFeedParams struct {

	// Scroll ID
	ScrollId *string `json:"scroll_id,omitempty"`

	// Limit messages
	Limit *int `json:"limit,omitempty"`

	// Workchain Id filter
	WorkchainId *int `json:"workchain_id,omitempty"`
}

// GetV1WorkchainBlockMasterParams defines parameters for GetV1WorkchainBlockMaster.
type GetV1WorkchainBlockMasterParams struct {

	// Block ID string in format: (WorkchainId,ShardHEX,SeqNo)
	Block string `json:"block"`
}
