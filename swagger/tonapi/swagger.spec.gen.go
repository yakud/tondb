// Package tonapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package tonapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"strings"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
