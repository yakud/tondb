// Package tonapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package tonapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"strings"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
